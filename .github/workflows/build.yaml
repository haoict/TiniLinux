name: Build
on:
  workflow_dispatch:
    inputs:
      board:
        description: 'Select board to build'
        required: true
        type: choice
        options:
          - h700
          - h700_consoleonly
          - h700_sway
          - rgb30
          - rgb30_consoleonly
          - raspberrypi3_64
      runner:
        description: 'Select runner type'
        required: true
        type: choice
        options:
          - github-hosted_ubuntu-24.04
          - self-hosted_debian12-sachchat2
          - self-hosted_ubuntu-24.04
          - self-hosted_ubuntu-25.04-arm

run-name: Build for ${{ inputs.board }} on ${{ inputs.runner }}

jobs:
  build:
    runs-on: ${{ (inputs.runner == 'github-hosted_ubuntu-24.04' && 'ubuntu-24.04') || (inputs.runner == 'self-hosted_debian12-sachchat2' && fromJSON('["self-hosted","debian12-sachchat2"]')) || (inputs.runner == 'self-hosted_ubuntu-24.04' && fromJSON('["self-hosted","ubuntu-24.04"]')) || (inputs.runner == 'self-hosted_ubuntu-25.04-arm' && fromJSON('["self-hosted","ubuntu-25.04-arm"]')) }}
    steps:
      - name: Install deps
        if: ${{ inputs.runner == 'github-hosted_ubuntu-24.04' }}
        run: |
          # disable mandb to save build time
          sudo mv /usr/bin/mandb /usr/bin/mandb-OFF
          sudo cp -p /bin/true /usr/bin/mandb 
          sudo rm -r /var/cache/man
          # install packages
          sudo apt update && sudo apt install -y build-essential mtools && sudo apt clean
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          path: TiniLinux
      - name: Checkout buildroot repo
        uses: actions/checkout@v4
        with:
          repository: buildroot/buildroot
          ref: 2025.08.1
          path: buildroot
      - name: Build
        run: |
          set -x
          ls -la . && cd buildroot
          make O=../TiniLinux/output.${{ inputs.board }} BR2_EXTERNAL=../TiniLinux ${{ inputs.board }}_defconfig
          cd ../TiniLinux/output.${{ inputs.board }}
          make source
          time make -j$(nproc)
          cd ..
      - name: Make flashable image
        run: |
          set -x
          cd TiniLinux
          if [ "${{ inputs.board }}" = "raspberrypi3_64" ]; then
            mv output.${{ inputs.board }}/images/sdcard.img output.${{ inputs.board }}/images/tinilinux-${{ inputs.board }}.img
          elif sudo -n true &> /dev/null; then
            echo "Current user has passwordless sudo privileges. Calling faster mk-flashable-img script"
            sudo BOARD=${{ inputs.board }} board/common/mk-flashable-img.sh
          else
            echo "Current user does not have passwordless sudo privileges (or requires a password). Calling rootless (slower) mk-flashable-img script"
            BOARD=${{ inputs.board }} board/common/mk-flashable-img-rootless.sh
          fi
      - name: Archive build output
        uses: actions/upload-artifact@v4
        with:
          name: tinilinux-${{ inputs.board }}.img
          path: TiniLinux/output.${{ inputs.board }}/images/tinilinux-${{ inputs.board }}.img
          retention-days: 2
